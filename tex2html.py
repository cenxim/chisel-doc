#!/usr/bin/env python

import fnmatch, json, os, re, subprocess, sys, tempfile

from bs4 import BeautifulSoup, Comment, Tag, NavigableString
from jinja2 import Environment, ChoiceLoader, FileSystemLoader

def main(args):
    # Extract <body> from the html generated by htlatex
    with open(args[1]) as texhtmlfile:
        soup = BeautifulSoup(texhtmlfile.read())
    tmpfile = args[2] + '.1'
    with open(tmpfile, 'w') as htmlfile:
        htmlfile.write("""
{% extends "base.html" %}

{% block content %}
{{text}}
""")
        text = ''
        for img in soup.find_all('img'):
            img['src'] = os.path.join(
                'figs', os.path.basename(img['src']))
        for node in soup.body.contents:
            if isinstance(node, Tag) and node.name == 'pre':
                codefile = tempfile.NamedTemporaryFile(delete=False)
                codepath = codefile.name
                with codefile:
                    for code in node.contents:
                        if isinstance(code, Tag) and code.name == 'br':
                            codefile.write('\n')
                        elif not isinstance(code, Comment):
                            if isinstance(code, NavigableString):
                                codefile.write(code.string)
                            else:
                                codefile.write(code.get_text().encode('utf-8'))
                codetext = subprocess.check_output(
                    ["source-highlight", "-s", "scala", "-i", codepath])
                os.remove(codepath)
                text = text + codetext.decode('utf-8')
            elif not isinstance(node, Comment):
                text = text + str(node).decode('utf-8')
        htmlfile.write("""
{% endblock %}
""")

    # Dress up with base layout
    env = Environment(loader=ChoiceLoader([
                FileSystemLoader('.'),
                FileSystemLoader(
                    os.path.join(os.path.dirname(os.path.dirname(sys.argv[0])),
                                 'doc', 'templates'))]))
    template = env.get_template(tmpfile)
    with open(args[2], 'w') as outfile:
        outfile.write(template.render(text=text).encode('utf-8'))


if __name__ == '__main__':
    main(sys.argv)
